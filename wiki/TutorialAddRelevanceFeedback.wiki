#summary A tutorial on adding relevance feedback.

= Introduction =

This tutorial shows how to add support for (explicit) relevance feedback to UCAIR. Relevance feedback allows user to explicitly specify whether a document is relevant or not, and uses this information to help rerank the unjudged documents.

= Step 1: UI for relevance judgment =

In this step we'll change the HTML to display clickable links that can be used to provide relevance judgment. There is a "Y" link to indicate positive relevance, a "N" link to indicate negative relevance, and an initially hidden "C" link to cancel previous made relevance judgment:

[http://code.google.com/p/ucair/source/diff?spec=svn22&r=22&format=side&path=/trunk/templates/result_list_view.htm result_list_view.htm]
{{{
<span class="search_result_rating" style="display:none">${rating}</span>
<span class="search_result_rating_y">Y</span>
<span class="search_result_rating_n">N</span>
<span class="search_result_rating_c">C</span>
<span class="search_result_rating_url" style="display:none">/rate?sid=${search_id}&amp;pos=${result_pos}&amp;view=${view_id}&amp;rating=</span>
}}}

I use a hidden `span.search_result_rating` element to hold the current rating, and a hidden `span.search_result_rating_url` element to hold the url for rating submission.

Note the use of template variables such as ${search_id} and ${result_pos}. These are replaced by actual values when the HTML pages are rendered. I have written a custom C++ based template engine ([http://code.google.com/p/ucair/source/browse/trunk/UCAIR09/template_engine.h template_engine.h] [http://code.google.com/p/ucair/source/browse/trunk/UCAIR09/template_engine.cpp .cpp]) that provides somewhat comparable functionality as JSP/PHP. 

Following is associated CSS:

[http://code.google.com/p/ucair/source/diff?spec=svn22&r=22&format=side&path=/trunk/static_files/main.css main.css]
{{{
.search_result_rating_y, .search_result_rating_n, .search_result_rating_c{
        color: #7777CC;
        margin-left: 5px;
        margin-right: 5px;
        padding-left: 2px;
        padding-right: 2px;
        text-decoration: underline;
        cursor: pointer;
}

.search_result_rating_y.rated {
        color: #007700;
        background-color: #F0F0F0;
        font-weight: bold;
        text-decoration: none;
        cursor: auto;
}

.search_result_rating_n.rated {
        color: #770000;
        background-color: #F0F0F0;
        font-weight: bold;
        text-decoration: none;
        cursor: auto;
}
}}}

We change the colors when they are assigned a `rated` class.

Finally there is the Javascript (I use [http://jquery.com/ JQuery]):

[http://code.google.com/p/ucair/source/diff?spec=svn22&r=22&format=side&path=/trunk/static_files/main.js main.js]
{{{
function prepareRatings() {
        $(".search_result_rating").each(function() {
                var ratingElem = $(this);
                showRating(ratingElem, false);
                var y = ratingElem.nextAll(".search_result_rating_y");
                var n = ratingElem.nextAll(".search_result_rating_n");
                var c = ratingElem.nextAll(".search_result_rating_c");
                y.click(function() {
                        ratingElem.text("Y");
                        showRating(ratingElem, true);
                });
                n.click(function() {
                        ratingElem.text("N");
                        showRating(ratingElem, true);
                });
                c.click(function() {
                        ratingElem.text("");
                        showRating(ratingElem, true);
                });
        });
}

function showRating(ratingElem, sendRating) {
        var y = ratingElem.nextAll(".search_result_rating_y");
        var n = ratingElem.nextAll(".search_result_rating_n");
        var c = ratingElem.nextAll(".search_result_rating_c");
        var val = ratingElem.text();
        if (val == "Y") {
                y.addClass("rated").show();
                n.removeClass("rated").hide();
                c.show();
        }
        else if (val == "N") {
                y.removeClass("rated").hide();
                n.addClass("rated").show();
                c.show();
        }
        else {
                y.removeClass("rated").show();
                n.removeClass("rated").show();
                c.hide();
        }
        if (sendRating) {
                var url = ratingElem.nextAll(".search_result_rating_url").text();
                $.get(url + encodeURI(val));
        }
}
}}}

When "Y" is clicked, it is highlighted, "N" becomes hidden, "C" becomes visible, and we send an AJAX request to the server (`$.get`) using the url `/rate?sid=${search_id}&amp;pos=${result_pos}&amp;view=${view_id}&amp;rating=Y`.